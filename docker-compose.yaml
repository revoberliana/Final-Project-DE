services:
  airflow:
    container_name: revo_airflow_webserver
    build: .
    restart: always
    env_file:
      - .env
    environment:
      - AIRFLOW_HOME=/opt/airflow
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW__CORE__FERNET_KEY}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/scripts
      - ./data:/opt/airflow/data
      - ./models:/opt/airflow/models
      - ./config:/opt/airflow/config
      - ./gcp-key.json:/opt/airflow/gcp-key.json
      - ./youtube_trending:/opt/airflow/dbt
      - ./profiles:/home/airflow/.dbt
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:8080"
    command: ["webserver"]
    depends_on:
      scheduler:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  scheduler:
    container_name: revo_airflow_scheduler
    build: .
    restart: always
    env_file:
      - .env
    environment:
      - AIRFLOW_HOME=/opt/airflow
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/scripts
      - ./data:/opt/airflow/data
      - ./models:/opt/airflow/models
      - ./config:/opt/airflow/config
      - ./gcp-key.json:/opt/airflow/gcp-key.json
      - ./youtube_trending:/opt/airflow/dbt
      - ./profiles:/home/airflow/.dbts
      - /var/run/docker.sock:/var/run/docker.sock
    command: ["scheduler"]
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "airflow", "jobs", "check", "--job-type", "SchedulerJob"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres:
    image: postgres:15  # Gunakan versi yang stabil
    container_name: revo_airflow_postgres
    restart: always
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres-db-volume:
